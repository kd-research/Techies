_task_common: &task_common
  human_input: false
  async_execution: false

game_hierarchy_representation:
  <<: *task_common
  agent: hierarchy_architect
  description: >
    You are being asked to create a game with following game specifications: "{game_specifications}".
    Your task is to propose and iterate the game hierarchy of the game.
    The "game hierarchy" is a tree structure that represents the game components and their relationships.
    Each game component should be a class abstraction that represents a game object or a game logic.
    Each relation should be a indexable reference to another game component.
    Relations could be one-to-one, one-to-many, many-to-one, or many-to-many.
    The first level should be characterized by the object concepts for each visual game component,
    as well as other game components such as the game logic and input handler
    You would start from an empty working directory.
    You should create multiple files to represent the game hierarchy.
    Your working directory will be delivered to hierarchy reviewers.
  expected_output: >
    A brief description of the game in plain text with less than 300 words.

hierarchy_review:
  <<: *task_common
  agent: hierarchy_reviewer
  description: >
    Your context is the introduction of a new game and the game hierarchy design.
    All the files in the working directory are the game hierarchy representation.
    Review game hierarchy specifications and give feedbacks as final answer. 
    Investigate to verify if all questions can be answered by the game hierarchy.
    Give feedback on the game hierarchy.

    Investigate to confirm whether there are enough information to answer following questions in the hierarchy:
    Which component handles if the game is finished?
    Which component handles the score?
    Which component takes user inputs and commands the ui or player actions? For each input, who will be the target to communicate with?
  expected_output: >
    Report the quality of the game hierarchy.
    Report the expected answer to the questions.
    Report the refining suggestions.
    The final answer should be a plain text with less than 300 words.
  depends_on:
    - game_hierarchy_representation

game_hierarchy_refinement:
  <<: *task_common
  agent: hierarchy_architect_refiner
  description: >
    Refine the game hierarchy based on feedback from reviewers.
    You should overwrite the existing files in the working directory.
    Your working directory will be delivered to hierarchy assembling team.
  expected_output: >
    A brief description of the game itself and the game hierarchy design in plain text with less than 300 words.
  depends_on:
    - game_hierarchy_representation
    - hierarchy_review

game_hierarchy_assembling: 
  <<: *task_common
  agent: hierarchy_assembler
  description: >
    List existing files in the working directory. Read all files to understand the game hierarchy.
    Create a unified game hierarchy from the files.
  expected_output: >
    Your final answer should be a single json object that represents the game hierarchy.
  output_file: game_hierarchy.json
  depends_on:
    - game_hierarchy_refinement

code_develop:
  <<: *task_common
  agent: game_develop_manager
  description: >
    Develop an html5 game based on following game hierarchy.
    You would expect a game hierarchy file with name game_hierarchy.json.
    The game would be loaded into an empty html page using with src="index.js".
  expected_output: >
    List of filenames that contain the game code.

code_assemble:
  <<: *task_common
  agent: game_develop_manager
  description: >
    Assemble the game code based on existing individual components.
    Append game setup and logic at the end of the game code.
    The game would be compiled using webpack. Make sure you import everything in index.js.
    The compiled game would be loaded into an empty html page using with src="main.js".
    You would expect an empty DOM at beginning. Any DOM manipulation should be done in the game code.
  expected_output: >
    Your final answer should be a single file that contains the game code.
  depends_on:
    - code_develop

# vim: set foldmethod=indent foldlevel=0:
